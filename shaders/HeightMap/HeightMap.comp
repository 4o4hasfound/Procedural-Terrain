#version 430 core

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(r16f, binding = 0) uniform image2D HeightMap;

uniform vec2 pos;
uniform int octaves;
uniform float gDispFactor;      
uniform float freq;
uniform float power;

uint hash(uint x) {
	x += (x << 10u);
	x ^= (x >> 6u);
	x += (x << 3u);
	x ^= (x >> 11u);
	x += (x << 15u);
	return x;
}

uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }

float floatConstruct( uint m ) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}
float Noise(float x, float y) { return floatConstruct(hash(floatBitsToUint(vec2(x,y)))); }
float SmoothedNoise(int x, int y) {
	float corners = (Noise(x - 1, y - 1) + Noise(x + 1, y - 1) +
		Noise(x - 1, y + 1) + Noise(x + 1, y + 1)) / 16,
		sides = (Noise(x - 1, y) + Noise(x + 1, y) + Noise(x, y - 1) +
			Noise(x, y + 1)) / 8,
		center = Noise(x, y) / 4;
	return corners + sides + center;
}

float Interpolate(float a, float b, float x) {
	float ft = x * 3.1415927,
		f = (1 - cos(ft)) * 0.5;
	return  a * (1 - f) + b * f;
}

float InterpolatedNoise(float x, float y) {
	int integer_X = int(floor(x));
	float fractional_X = x - integer_X;
	int integer_Y = int(floor(y));
	float fractional_Y = y - integer_Y;

	float v1 = SmoothedNoise(integer_X, integer_Y),
		v2 = SmoothedNoise(integer_X + 1, integer_Y),
		v3 = SmoothedNoise(integer_X, integer_Y + 1),
		v4 = SmoothedNoise(integer_X + 1, integer_Y + 1),
		i1 = Interpolate(v1, v2, fractional_X),
		i2 = Interpolate(v3, v4, fractional_X);
	return Interpolate(i1, i2, fractional_Y);
}

float persistence = 0.5;

float noise(float x, float y, int octwaves) {
	float total = 0,
		frequency = pow(2, octwaves),
		amplitude = 1;
	for (int i = 0; i < octwaves; ++i) {
		frequency /= 2;
		amplitude *= persistence;
		total += InterpolatedNoise(x / frequency, y / frequency) * amplitude;
	}
	return total / frequency;
}


void main(){
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	float Displacement = pow(noise((texelCoord.x+pos.x), (texelCoord.y+pos.y), 12), 5.0);
	imageStore(HeightMap, texelCoord, vec4(Displacement, 0.0, 0.0, 0.0));
}